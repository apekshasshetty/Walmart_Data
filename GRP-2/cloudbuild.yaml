steps:
#   # --- Debug: List all workspace files ---
#   # - name: 'alpine'
#   #   entrypoint: 'sh'
#   #   args: ['-c', 'ls -R /']

#   # --- Run unit tests for currency-handler ---
#   - name: 'python:3.10'
#     id: 'Run tests for currency-handler'
#     dir: currency-function
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         cd currency-function
#         pip install -r requirements.txt
#         PYTHONPATH=. python3 -m unittest discover -s tests


#   # --- Deploy currency-handler Function ---
#   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#     entrypoint: 'gcloud'
#     args:
#       [
#         'functions', 'deploy', 'currency-handler',
#         '--runtime', 'python310',
#         '--trigger-topic', 'currency-topic',
#         '--entry-point', 'currency_handler',
#         '--region', 'us-central1',
#         '--service-account', 'pub-sub-1233@appspot.gserviceaccount.com',
#         '--source', 'currency-function/'
#       ]

#   # --- Run unit tests for currency-handler ---
#   - name: 'python:3.10'
#     id: 'Run tests for get_latest_rate_and_update_bq'
#     dir: rate_updater
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         cd rate_updater
#         pip install -r requirements.txt
#         python tests/test_get_latest_rate_and_update_bq.py
#         PYTHONPATH=. python3 -m unittest discover -s tests

        
#   # --- Deploy get_latest_rate_and_update_bq Function ---
#   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#     entrypoint: 'gcloud'
#     args:
#       [
#         'functions', 'deploy', 'get_latest_rate_and_update_bq',
#         '--runtime', 'python310',
#         '--trigger-topic', 'trigger-bigtable-to-bq',
#         '--entry-point', 'get_latest_rate_and_update_bq',
#         '--region', 'us-central1',
#         '--set-env-vars', 'GCP_PROJECT=pub-sub-1233',
#         '--source', 'rate_updater/'
#       ]

#   # --- Trigger currency Cloud Scheduler job manually ---
#   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#     entrypoint: 'gcloud'
#     args: ['scheduler', 'jobs', 'run', 'currency-scheduler-job', '--location=us-central1']

#   # --- Trigger rate Cloud Scheduler job manually ---
#   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#     entrypoint: 'gcloud'
#     args: ['scheduler', 'jobs', 'run', 'trigger-rate-job', '--location=us-central1']

#   # --- Run BigQuery transformation SQL ---
#   - name: gcr.io/cloud-builders/gcloud
#     entrypoint: bash
#     args:
#       - -c
#       - |
#         bq query --use_legacy_sql=false --project_id=final-project-458404 < sql/clean_and_transform_data.sql

#   # --- Run BigQuery test SQL queries ---
#   - name: gcr.io/cloud-builders/gcloud
#     entrypoint: bash
#     args:
#       - -c
#       - |
#         bq query --use_legacy_sql=false --project_id=final-project-458404 < tests/test_cleaned_data.sql
#         bq query --use_legacy_sql=false --project_id=final-project-458404 < tests/test_transformed_data.sql
#         bq query --use_legacy_sql=false --project_id=final-project-458404 < tests/test_data_completeness.sql
#         bq query --use_legacy_sql=false --project_id=final-project-458404 < tests/test_referential_integrity.sql
#   - name: 'python:3.10'
#     id: 'install'
#     entrypoint: 'pip'
#     args: ['install', 'pandas', 'scikit-learn', 'pytest', 'bigframes']
#     env:
#       - 'PYTHONPATH=/tmp/packages'
 
  # Step 2: Run tests with verbose output
 steps:
  # --- Setup Python environment ---
  - name: 'python:3.11'
    id: 'setup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        pip install --upgrade pip
        pip install pytest pandas spacy==3.8.5
        python -m spacy download en_core_web_sm

  # --- Run frontend tests ---
  - name: 'python:3.11'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Workspace contents:"
        ls -la

        echo "Frontend contents:"
        ls -la frontend/

        echo "Running tests..."
        cd frontend
        PYTHONPATH=/workspace pytest test_main.py -v
    waitFor: ['setup']

options:
  logging: CLOUD_LOGGING_ONLY
timeout: 600s
